/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WhyAgiliumRouteImport } from './routes/why-agilium'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ServicesIndexRouteImport } from './routes/services/index'
import { Route as ServicesDigitalSolutionsIndexRouteImport } from './routes/services/digital-solutions/index'

const WhyAgiliumRoute = WhyAgiliumRouteImport.update({
  id: '/why-agilium',
  path: '/why-agilium',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesIndexRoute = ServicesIndexRouteImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesDigitalSolutionsIndexRoute =
  ServicesDigitalSolutionsIndexRouteImport.update({
    id: '/services/digital-solutions/',
    path: '/services/digital-solutions/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/why-agilium': typeof WhyAgiliumRoute
  '/services': typeof ServicesIndexRoute
  '/services/digital-solutions': typeof ServicesDigitalSolutionsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/why-agilium': typeof WhyAgiliumRoute
  '/services': typeof ServicesIndexRoute
  '/services/digital-solutions': typeof ServicesDigitalSolutionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/why-agilium': typeof WhyAgiliumRoute
  '/services/': typeof ServicesIndexRoute
  '/services/digital-solutions/': typeof ServicesDigitalSolutionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/why-agilium'
    | '/services'
    | '/services/digital-solutions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/why-agilium'
    | '/services'
    | '/services/digital-solutions'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/why-agilium'
    | '/services/'
    | '/services/digital-solutions/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  WhyAgiliumRoute: typeof WhyAgiliumRoute
  ServicesIndexRoute: typeof ServicesIndexRoute
  ServicesDigitalSolutionsIndexRoute: typeof ServicesDigitalSolutionsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/why-agilium': {
      id: '/why-agilium'
      path: '/why-agilium'
      fullPath: '/why-agilium'
      preLoaderRoute: typeof WhyAgiliumRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/': {
      id: '/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/digital-solutions/': {
      id: '/services/digital-solutions/'
      path: '/services/digital-solutions'
      fullPath: '/services/digital-solutions'
      preLoaderRoute: typeof ServicesDigitalSolutionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  WhyAgiliumRoute: WhyAgiliumRoute,
  ServicesIndexRoute: ServicesIndexRoute,
  ServicesDigitalSolutionsIndexRoute: ServicesDigitalSolutionsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
